@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<nav class="navbar navbar-expand-sm navbar-dark bg-primary shadow">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <i class="fas fa-box-open"></i>
            Sandbox
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
            <ul class="nav nav-pill navbar-nav" id="myNav" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="about-tab" data-toggle="tab" href="#about" role="tab" aria-controls="about" aria-selected="true">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="modules-tab" data-toggle="tab" href="#modules" role="tab" aria-controls="modules" aria-selected="false">Modules</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="event-log-tab" data-toggle="tab" href="#event-log" role="tab" aria-controls="event-log" aria-selected="false">Event Log</a>
                </li>
                <li class="nav-item d-none">
                    <a class="nav-link" id="module-details-tab" data-toggle="tab" href="#module-details" role="tab" aria-controls="module-details" aria-selected="false">Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="settings-tab" data-toggle="tab" href="#settings" role="tab" aria-controls="settings" aria-selected="false">Settings</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="feedback-tab" data-toggle="tab" href="#feedback" role="tab" aria-controls="feedback" aria-selected="false">Feedback</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="main-body container-fluid pt-4">
    <div class="tab-content" id="nav-tabContent">

        @* About *@
        <div class="tab-pane active" id="about" role="tabpanel" aria-labelledby="about-tab">
            <div class="row">
                <div class="col-12 col-md-8 mt-5 pt-5 mt-sm-3 pt-sm-3 mt-md-0 pt-md-0">
                    <h1 class="display-3 mt-5 pt-5 mt-sm-3 pt-sm-3 mt-md-0 pt-md-0">Welcome to the sandbox!</h1>
                </div>
                <div class="col-12">
                    <p class="lead">
                        Traditionally, a sandbox is a place to make new things, dig tunnels, play, and just have endless fun. It's a place to test our bravery and knowledge, and press the boundaries of our imaginations as often as possible. Likewise, the digital sandbox builds on that same foundation to spark creativity, fuel abstract thinking, and simplify accelerated prototyping. Here you'll find a modular solution to individual problems I've faced, new ideas I've wanted to test out, and concepts I've tackled head on. Now that you know what to expect, feel free to browse the currently available <a href="#modules" role="tab">modules</a>, and leave some <a href="#feedback" role="tab">feedback</a>.
                        <br />
                        <br />
                        Things change here rapidly as there's always something to do to improve. The most recent change integrated the feedback tab with the database, updated the event log to use the new display styles, and refreshed the home page to display TODO items.
                        <br />
                        <br /><code>#TODOs</code>
                    </p>
                    <ul class="list-group">
                        <li class="list-group-item">Add bundling and minification for <code>JavaScript</code> and <code>CSS</code>.</li>
                        <li class="list-group-item">Add parameter validation.</li>
                        <li class="list-group-item">Send events to database.</li>
                        <li class="list-group-item">Load events from database.</li>
                        <li class="list-group-item">Improve messaging system.</li>
                        <li class="list-group-item">Add code preview for modules.</li>
                        <li class="list-group-item">Add module execution statistics.</li>
                        <li class="list-group-item">Add support for more than string responses (think images, HTML, etc).</li>
                        <li class="list-group-item">Upgrade the error page.</li>
                        <li class="list-group-item">Add support for <code>Python</code>.</li>
                        <li class="list-group-item">Add support for <code>JavaScript</code>.</li>
                        <li class="list-group-item">Add support for <code>C++</code>.</li>
                        <li class="list-group-item">Add support for visual modules (think of CodePen).</li>
                        <li class="list-group-item">Add support for web player Unity games.</li>
                    </ul>
                </div>
            </div>
        </div>

        @* Modules *@
        <div class="tab-pane" id="modules" role="tabpanel" aria-labelledby="modules-tab">
            <div class="row">
                <div class="col-12">
                    <h1 class="display-4">Modules</h1>
                    <p class="lead">Sandbox modules can be written in several different languages. The majority of them will be written in <code>C#</code>, followed closely by <code>Python</code>, <code>JavaScript</code>, and <code>F#</code>. Currently, the sandbox is still in its infancy; however, this just means that it's growing swiftly. New modules will begin flooding in once support is added for all languages intended to be supported.</p>
                </div>
            </div>
            <div class="row underline">
                @*<div class="col-12 col-sm-6">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Language</span>
                        <select class="form-select" aria-label="Default select example">
                            <option selected>All</option>
                            <option value="1">C#</option>
                            <option value="2">F#</option>
                            <option value="3">Visual Basic</option>
                        </select>
                    </div>
                </div>
                <div class="col-12 col-sm-6">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Category</span>
                        <select class="form-select" aria-label="Default select example">
                            <option selected>All</option>
                            <option value="1">General</option>
                            <option value="2">Cryptography</option>
                            <option value="3">API Integration</option>
                        </select>
                    </div>
                </div>*@
            </div>
            <div class="row pl-3 pr-3">
                @foreach (var module in Model.DiscoveredModules) {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 module-container">
                        <div class="module @module.FriendlyLanguage pl-1 pr-1" onclick="showModuleDetails(this, '@module.ID');">
                            <p class="lead mb-0">@module.Name</p>
                            <small>@module.ShortDescription</small>
                            <div class="badge-collection">
                                <span class="badge @module.FriendlyLanguage">@module.Language</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        @* Statistics and Events *@
        <div class="tab-pane" id="event-log" role="tabpanel" aria-labelledby="event-log-tab">
            <h1 class="display-4">Events</h1>
            <div class="row">
                <div id="eventList" class="col-12"></div>
            </div>
        </div>

        @* Module Details *@
        <div class="tab-pane" id="module-details" role="tabpanel" aria-labelledby="module-details-tab">

            @* Module Description *@
            <div class="row underline">
                <div class="col-12 col-sm-9">
                    <h1 class="display-4"><span id="moduleName"></span> <span id="moduleLanguage" class="badge csharp"></span></h1>
                    <p id="moduleTags" class="lead mb-1"></p>
                    <p id="moduleDescription" class="lead mb-1"></p>
                </div>
                <div class="col-12 col-sm-3">
                    <button id="executeButton" type="submit" class="btn btn-primary col-12 mb-1" onclick="execute(this);" data-moduleid="">Execute</button>
                </div>
            </div>

            @* Parameters *@
            <div class="row pt-3">
                <div class="col-12 col-md-4">
                    <h1 class="display-4">Parameters</h1>
                    <form id="moduleParameters"></form>
                </div>
            </div>
        </div>

        @* Settings *@
        <div class="tab-pane" id="settings" role="tabpanel" aria-labelledby="settings-tab">
            <h1 class="display-4">Settings</h1>
            <p class="lead">You know, some cool configuration stuff lives here. If you change stuff, stuff might happen!</p>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Display Name</label>
                <input type="text" class="form-control" id="displayName" aria-describedby="displayNameHelp">
                <div id="displayNameHelp" class="form-text">This is how you appear to others in the event log and in feedback.</div>
            </div>
            <div class="mb-3">
                <label for="darkModeToggle" class="form-label">Current Theme</label>
                <div id="darkModeToggle" class="toggle" aria-describedby="darkModeToggleHelp">
                    <input type="checkbox" id="theHolyToggle" onchange="toggleDarkMode(this);" checked />
                    <label class="d-inline-block" for="theHolyToggle"></label>
                </div>
                <div id="darkModeToggleHelp" class="form-text">I wonder what this does?</div>
            </div>
        </div>

        @* Feedback *@
        <div class="tab-pane" id="feedback" role="tabpanel" aria-labelledby="feedback-tab">
            <div class="row underline pb-3">
                <h1 class="display-4">Feedback</h1>
                <p class="lead">Did you enjoy playing in the sandbox today? What module did you like the most? Is there anything you would've done differently? Share your thoughts because, well, reading is fun!</p>
                <div class="mb-3">
                    <textarea class="form-control" id="userFeedback" rows="3"></textarea>
                </div>
                <button class="btn btn-primary float-right" onclick="sendFeedback(); return false;">Submit</button>
            </div>
            <p class="lead mt-3">In case you're curious, others before you have left their mark on the sandbox. Here's what they had to say!</p>
            <div class="row">
                <div id="feedbackColumnA" class="col-12 col-md-6 col-lg-4"></div>
                <div id="feedbackColumnB" class="col-12 col-md-6 col-lg-4"></div>
                <div id="feedbackColumnC" class="col-12 col-md-6 col-lg-4"></div>
            </div>
        </div>

    </div>
</div>
<script>
    var moduleParameters = undefined;
    var usernameInput = document.getElementById("displayName");

    var modulesTab = document.getElementById("modules-tab");
    var modulesTabContent = document.getElementById("modules");

    var detailsTab = document.getElementById("module-details-tab");
    var detailsTabContent = document.getElementById("module-details");

    var eventLogTab = document.getElementById("event-log-tab");
    var eventLogTabContent = document.getElementById("event-log")

    // Fetch all details for the module, populate the details tab, and change tabs.
    var moduleName = document.getElementById("moduleName");
    var moduleLanguage = document.getElementById("moduleLanguage");
    var moduleDescription = document.getElementById("moduleDescription");
    var moduleTags = document.getElementById("moduleTags");
    var executeButton = document.getElementById("executeButton");
    function showModuleDetails(sender, id) {
        activateLoader();
        modulesTab.classList.remove("active");
        modulesTabContent.classList.remove("active");

        getModule(id, function (result) {
            moduleName.innerText = result.name;
            moduleLanguage.innerText = result.language;
            moduleLanguage.className = "badge " + result.friendlyLanguage;
            moduleDescription.innerText = result.description;
            moduleTags.innerHTML = "";
            executeButton.dataset.moduleid = result.id;
            for (let i = 0; i < result.tags.length; i++) {
                if (result.tags[i].length > 0) {
                    var tag = document.createElement("SPAN");
                    tag.className = "badge d-inline-block mr-1";
                    tag.innerText = result.tags[i];
                    moduleTags.appendChild(tag);
                }
            }

            getModuleParameters(id, function (result) {
                document.getElementById("moduleParameters").innerHTML = result.length < 1 ? "There are no parameters for this module." : "";
                moduleParameters = result;
                for (let i = 0; i < result.length; i++)
                    document.getElementById("moduleParameters").appendChild(createDisplayElementForParameter(result[i]));

                deactivateLoader();
            }, function (result) {
                deactivateLoader();
            });
        }, function (result) {
            sender.classList.add("failed-to-execute");
            deactivateLoader();
        });

        detailsTab.classList.add("active");
        detailsTabContent.classList.add("active");
    }

    // Execute the module.
    function execute(sender) {
        activateLoader();
        var moduleID = sender.dataset.moduleid;
        var params = document.getElementById("moduleParameters").children;
        for (var i = 0; i < moduleParameters.length; i++) {
            var input = undefined;
            var container = params[i].getElementsByTagName("DIV")[0];
            switch (moduleParameters[i].displayElement) {
                case DisplayElement.RichTextbox: input = container.getElementsByTagName("TEXTAREA")[0]; break;
                default: input = container.getElementsByTagName("INPUT")[0]; break;
            }

            if (moduleParameters[i].displayElement == DisplayElement.Checkbox)
                moduleParameters[i].value = input.checked;
            else
                moduleParameters[i].value = input.value;
        }
        executeModule({
            id: moduleID,
            username: usernameInput.value,
            parameters: moduleParameters
        }, function (result) {
            detailsTab.classList.remove("active");
            detailsTabContent.classList.remove("active");
            eventLogTab.classList.add("active");
            eventLogTabContent.classList.add("active");
            deactivateLoader();
        }, function (result) {
            deactivateLoader();
        });
    }
    setInterval(getEvents, 1000);
    function getEvents() {
        callWebService("POST", "Queue/GetMessages", null, function (result) {
            if (result.length > 0) {
                var container = document.getElementById("eventList");
                for (var i = 0; i < result.length; i++) {
                    var eventContainer = document.createElement("DIV");
                    eventContainer.className = "col-12 feedback-container";

                    var eventItem = document.createElement("DIV");
                    eventItem.className = "feedback";

                    var eventTypeClass = "";
                    switch (result[i].eventType) {
                        case SandboxEventType.Information: eventTypeClass = "sandbox-text-information"; break;
                        case SandboxEventType.Success: eventTypeClass = "sandbox-text-success"; break;
                        case SandboxEventType.Warning: eventTypeClass = "sandbox-text-warning"; break;
                        case SandboxEventType.Failure: eventTypeClass = "sandbox-text-failure"; break;
                    }

                    var owningModule = document.createElement("SMALL");
                    owningModule.className = "underline " + eventTypeClass;
                    owningModule.innerText = result[i].owningModule;

                    var message = document.createElement("SPAN");
                    message.innerText = result[i].message;

                    eventItem.appendChild(owningModule);
                    eventItem.appendChild(message);
                    eventContainer.appendChild(eventItem);
                    container.insertBefore(eventContainer, container.childNodes[0]);
                }
            }
        }, function (result) {

        });
    }
    function sendFeedback() {
        activateLoader();
        var feedback = document.getElementById("userFeedback").value;
        submitFeedback(usernameInput.value, feedback, function (result) {
            deactivateLoader();
        }, function (result) {
            deactivateLoader();
        });
    }
    setInterval(getFeedback, 1000);
    function getFeedback() {
        fetchFeedback(function (result) {
            var feedbackColumnA = document.getElementById("feedbackColumnA");
            feedbackColumnA.innerHTML = "";
            createFeedbackItemsForSpecifiedColumn(0, 3, feedbackColumnA, result);

            var feedbackColumnB = document.getElementById("feedbackColumnB");
            feedbackColumnB.innerHTML = "";
            createFeedbackItemsForSpecifiedColumn(1, 3, feedbackColumnB, result);

            var feedbackColumnC = document.getElementById("feedbackColumnC");
            feedbackColumnC.innerHTML = "";
            createFeedbackItemsForSpecifiedColumn(2, 3, feedbackColumnC, result);
        }, function (result) {

        });
    }
    function createFeedbackItemsForSpecifiedColumn(columnIndex, columnCount, container, data) {
        for (var i = columnIndex; i < data.length; i += columnCount) {
            var feedbackContainer = document.createElement("DIV");
            feedbackContainer.className = "col-12 feedback-container";

            var feedbackItem = document.createElement("DIV");
            feedbackItem.className = "feedback";

            var author = document.createElement("SMALL");
            author.className = "underline";
            author.innerText = data[i].userDisplayName;

            var message = document.createElement("SPAN");
            message.innerText = data[i].message;

            feedbackItem.appendChild(author);
            feedbackItem.appendChild(message);
            feedbackContainer.appendChild(feedbackItem);
            container.appendChild(feedbackContainer);
        }
    }
</script>
